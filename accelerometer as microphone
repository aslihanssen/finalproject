#include <stdio.h>
#include <string.h>
#include "stm32f4xx_hal.h"

// I2C port and device address for the accelerometer
#define ACCEL_I2C_PORT           hi2c1
#define ACCEL_I2C_ADDRESS        0x32

// Registers for reading acceleration data
#define ACCEL_REG_X_LSB          0x28
#define ACCEL_REG_X_MSB          0x29
#define ACCEL_REG_Y_LSB          0x2A
#define ACCEL_REG_Y_MSB          0x2B
#define ACCEL_REG_Z_LSB          0x2C
#define ACCEL_REG_Z_MSB          0x2D

// Maximum and minimum values for the accelerometer
#define ACCEL_MIN_VALUE          -32768
#define ACCEL_MAX_VALUE          32767

// Function prototypes
void accel_init(I2C_HandleTypeDef *hi2c);
int16_t accel_read_axis(I2C_HandleTypeDef *hi2c, uint8_t axis_reg_lsb, uint8_t axis_reg_msb);

int main(void)
{
    // Initialize the I2C port for the accelerometer
    accel_init(&ACCEL_I2C_PORT);

    while (1)
    {
        // Read the acceleration values for the x, y, and z axes
        int16_t x_accel = accel_read_axis(&ACCEL_I2C_PORT, ACCEL_REG_X_LSB, ACCEL_REG_X_MSB);
        int16_t y_accel = accel_read_axis(&ACCEL_I2C_PORT, ACCEL_REG_Y_LSB, ACCEL_REG_Y_MSB);
        int16_t z_accel = accel_read_axis(&ACCEL_I2C_PORT, ACCEL_REG_Z_LSB, ACCEL_REG_Z_MSB);

        // Scale the acceleration values to a range of 0-255
        uint8_t x_accel_scaled = (uint8_t)((x_accel - ACCEL_MIN_VALUE) / (ACCEL_MAX_VALUE - ACCEL_MIN_VALUE) * 255);
        uint8_t y_accel_scaled = (uint8_t)((y_accel - ACCEL_MIN_VALUE) / (ACCEL_MAX_VALUE - ACCEL_MIN_VALUE) * 255);
        uint8_t z_accel_scaled = (uint8_t)((z_accel - ACCEL_MIN_VALUE) / (ACCEL_MAX_VALUE - ACCEL_MIN_VALUE) * 255);

        // Use the scaled acceleration values as microphone input
        // ...
    }
}

void accel_init(I2C_HandleTypeDef *hi2c)
{
    // Initialize the I2C port for the accelerometer
    // ...
}

int16_t ac
